/*Copyright 2012 Jean-Louis PASTUREL **   Licensed under the Apache License, Version 2.0 (the "License");*  you may not use this file except in compliance with the License.*  You may obtain a copy of the License at**       http://www.apache.org/licenses/LICENSE-2.0**   Unless required by applicable law or agreed to in writing, software*  distributed under the License is distributed on an "AS IS" BASIS,*   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*   See the License for the specific language governing permissions and*  limitations under the License.*/package jlp.aspectsJMX.concreteAspects;import java.lang.management.ManagementFactory;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.Statement;import java.util.Calendar;import javax.management.InstanceAlreadyExistsException;import javax.management.MBeanRegistrationException;import javax.management.MBeanServer;import javax.management.MalformedObjectNameException;import javax.management.NotCompliantMBeanException;import javax.management.ObjectName;import jlp.aspectsJMX.mbean.PerfSQLStatement;public aspect ConcreteSqlStatementsDuration {		static PerfSQLStatement mbean;	static MBeanServer mbs;	static {		mbs = ManagementFactory.getPlatformMBeanServer();		ObjectName name;		try {			name = new ObjectName(					"AspectsConcrete:type=concretePerfSQLStatement");			mbean = new PerfSQLStatement();			mbs.registerMBean(mbean, name);		} catch (MalformedObjectNameException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (NullPointerException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (InstanceAlreadyExistsException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (MBeanRegistrationException e) {			// TODO Auto-generated catch block			e.printStackTrace();		} catch (NotCompliantMBeanException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}		System.out				.println("Creation JMX aspect ConcreteSqlStatementsDuration ");	}	/** Matches any execution of a JDBC statement */	// public pointcut statementImpl() : !execution(public *	// java.sql.PreparedStatement.*(..));	public final pointcut statementExec(PreparedStatement statement) : 		execution(public * PreparedStatement+.execute*(..))    && this(statement) && !cflowbelow(execution(public * PreparedStatement+.execute*(..)))  ;	/**	 * Call to create a Statement.	 * 	 * @param connection	 *            the connection called to create the statement, which is bound	 *            to track the statement's origin	 */	public final pointcut callCreatePreparedStatement(String sql): 		execution(PreparedStatement Connection.prepare*(String, ..))           && args(sql, ..);	Object around(Statement statement):  statementExec(statement)      {		synchronized (ConcreteSqlStatementsDuration.this) {			long deb = Calendar.getInstance().getTimeInMillis();			Object retour = proceed(statement);			long fin = Calendar.getInstance().getTimeInMillis();			int counter = mbean.getAspectSQLCounterExec();			double duration = (double) (fin - deb);			mbean.modAspectSQLCounterExec(mbean.getAspectSQLCounterExec() + 1);			if (duration <= mbean.getAspectSQLDurationTimeMini()) {				mbean.modAspectSQLDurationTimeMini(duration);			}			if (duration > mbean.getAspectSQLDurationTimeMax()) {				mbean.modAspectSQLDurationTimeMax(duration);			}			mbean.modAspectSQLDurationTimeCurrent(duration);			mbean.modAspectSQLTotalDuration(mbean.getAspectSQLTotalDuration()+duration);			mbean.modAspectSQLDurationTimeMoy((double) (mbean.getAspectSQLDurationTimeMoy()					* counter + duration)					/ (counter + 1));			// String sql=stripAfterWhere((String)statementSql.get(statement));			return retour;		}	}	//	// private Map statementFabric=new WeakIdentityHashMap();}